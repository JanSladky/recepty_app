"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateShoppingList = exports.toggleFavorite = exports.getMyFavorites = exports.resetPassword = exports.loginUser = void 0;
const bcrypt_1 = __importDefault(require("bcrypt"));
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const db_1 = __importDefault(require("../utils/db"));
const JWT_SECRET = process.env.JWT_SECRET || "tajny_klic";
// ‚úÖ P≈ôihl√°≈°en√≠ u≈æivatele
const loginUser = async (req, res) => {
    const { email, password } = req.body;
    try {
        const result = await db_1.default.query("SELECT * FROM users WHERE email = $1", [email]);
        const user = result.rows[0];
        if (!user) {
            res.status(401).json({ message: "Neplatn√© p≈ôihla≈°ovac√≠ √∫daje." });
            return;
        }
        const isMatch = await bcrypt_1.default.compare(password, user.password);
        if (!isMatch) {
            res.status(401).json({ message: "Neplatn√© p≈ôihla≈°ovac√≠ √∫daje." });
            return;
        }
        const token = jsonwebtoken_1.default.sign({ id: user.id, email: user.email, is_admin: user.is_admin }, JWT_SECRET, { expiresIn: "1d" });
        res.status(200).json({
            token,
            user: {
                id: user.id,
                email: user.email,
                name: user.name,
                is_admin: user.is_admin,
            },
        });
    }
    catch (error) {
        console.error("Chyba p≈ôi p≈ôihl√°≈°en√≠:", error);
        res.status(500).json({ error: "Chyba serveru p≈ôi p≈ôihl√°≈°en√≠." });
    }
};
exports.loginUser = loginUser;
// ‚úÖ Reset hesla pro u≈æivatele podle e-mailu
const resetPassword = async (req, res) => {
    const { email, newPassword } = req.body;
    try {
        const salt = await bcrypt_1.default.genSalt(10);
        const hashed = await bcrypt_1.default.hash(newPassword, salt);
        const result = await db_1.default.query("UPDATE users SET password = $1 WHERE email = $2", [hashed, email]);
        if (result.rowCount === 0) {
            res.status(404).json({ message: "U≈æivatel s t√≠mto e-mailem neexistuje." });
            return;
        }
        res.status(200).json({ message: "Heslo bylo √∫spƒõ≈°nƒõ zmƒõnƒõno." });
    }
    catch (error) {
        console.error("Chyba p≈ôi resetov√°n√≠ hesla:", error);
        res.status(500).json({ error: "Chyba serveru p≈ôi resetu hesla." });
    }
};
exports.resetPassword = resetPassword;
// ‚úÖ Z√≠sk√°n√≠ obl√≠ben√Ωch recept≈Ø p≈ôihl√°≈°en√©ho u≈æivatele
const getMyFavorites = async (req, res) => {
    try {
        const userId = req.user?.id;
        if (!userId) {
            res.status(401).json({ message: "Neautorizovan√Ω p≈ô√≠stup." });
            return;
        }
        const result = await db_1.default.query(`SELECT r.* FROM recipes r
       JOIN favorites f ON r.id = f.recipe_id
       WHERE f.user_id = $1`, [userId]);
        res.status(200).json(result.rows);
    }
    catch (error) {
        console.error("Chyba p≈ôi naƒç√≠t√°n√≠ obl√≠ben√Ωch recept≈Ø:", error);
        res.status(500).json({ error: "Chyba serveru." });
    }
};
exports.getMyFavorites = getMyFavorites;
// ‚úÖ P≈ôid√°n√≠ nebo odebr√°n√≠ receptu z obl√≠ben√Ωch
const toggleFavorite = async (req, res) => {
    try {
        const userId = req.user?.id;
        const recipeId = parseInt(req.params.id);
        console.log("üîÅ toggleFavorite");
        console.log("‚û°Ô∏è userId:", userId);
        console.log("‚û°Ô∏è recipeId:", recipeId);
        if (!userId || isNaN(recipeId)) {
            console.log("‚ùå Neplatn√© ID!");
            res.status(400).json({ message: "Neplatn√© ID u≈æivatele nebo receptu." });
            return;
        }
        const existing = await db_1.default.query("SELECT * FROM favorites WHERE user_id = $1 AND recipe_id = $2", [userId, recipeId]);
        console.log("üì¶ existuj√≠c√≠ z√°znam:", existing.rows);
        if (existing.rows.length > 0) {
            await db_1.default.query("DELETE FROM favorites WHERE user_id = $1 AND recipe_id = $2", [userId, recipeId]);
            console.log("üóëÔ∏è Recept odebr√°n z obl√≠ben√Ωch");
            res.status(200).json({ message: "Recept odebr√°n z obl√≠ben√Ωch." });
        }
        else {
            await db_1.default.query("INSERT INTO favorites (user_id, recipe_id) VALUES ($1, $2)", [userId, recipeId]);
            console.log("‚≠ê Recept p≈ôid√°n do obl√≠ben√Ωch");
            res.status(200).json({ message: "Recept p≈ôid√°n do obl√≠ben√Ωch." });
        }
    }
    catch (error) {
        console.error("‚ùå Chyba p≈ôi √∫pravƒõ obl√≠ben√Ωch:", error);
        res.status(500).json({ error: "Chyba serveru." });
    }
};
exports.toggleFavorite = toggleFavorite;
// ‚úÖ Generov√°n√≠ n√°kupn√≠ho seznamu z obl√≠ben√Ωch recept≈Ø
const generateShoppingList = async (req, res) => {
    try {
        const userId = req.user?.id;
        if (!userId) {
            res.status(401).json({ message: "Neautorizovan√Ω p≈ô√≠stup." });
            return;
        }
        const result = await db_1.default.query(`SELECT i.name, ri.quantity, ri.unit
       FROM recipes r
       JOIN favorites f ON f.recipe_id = r.id
       JOIN recipe_ingredients ri ON ri.recipe_id = r.id
       JOIN ingredients i ON i.id = ri.ingredient_id
       WHERE f.user_id = $1`, [userId]);
        res.status(200).json(result.rows);
    }
    catch (error) {
        console.error("Chyba p≈ôi generov√°n√≠ n√°kupn√≠ho seznamu:", error);
        res.status(500).json({ error: "Chyba serveru." });
    }
};
exports.generateShoppingList = generateShoppingList;
