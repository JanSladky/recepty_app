import { Request, Response } from "express";
import { getAllRecipes, getRecipeByIdFromDB, createFullRecipe, deleteRecipeFromDB, updateRecipeInDB } from "../models/recipeModel";

// ‚úÖ GET /api/recipes
export const getRecipes = async (req: Request, res: Response): Promise<void> => {
  try {
    const recipes = await getAllRecipes();
    res.json(recipes);
  } catch (error) {
    console.error("‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ recept≈Ø:", error);
    res.status(500).json({ error: "Chyba p≈ôi naƒç√≠t√°n√≠ recept≈Ø" });
  }
};

// ‚úÖ GET /api/recipes/:id
export const getRecipeById = async (req: Request, res: Response): Promise<void> => {
  try {
    const id = Number(req.params.id);
    const recipe = await getRecipeByIdFromDB(id);
    if (!recipe) {
      res.status(404).json({ error: "Recept nenalezen" });
      return;
    }
    res.json(recipe);
  } catch (error) {
    console.error("‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ detailu receptu:", error);
    res.status(500).json({ error: "Chyba serveru" });
  }
};

// ‚úÖ POST /api/recipes
export const addFullRecipe = async (req: Request, res: Response): Promise<void> => {
  try {
    const { title, description, ingredients, categories, mealType, steps } = req.body;

    if (!title || !description || !ingredients || !categories || !mealType || !steps) {
      res.status(400).json({ error: "Chyb√≠ povinn√° pole." });
      return;
    }

    const parsedIngredients = JSON.parse(ingredients);
    const parsedCategories = JSON.parse(categories);
    const parsedMealTypes = JSON.parse(mealType);
    const parsedSteps = steps ? JSON.parse(steps) : [];

    const imagePath = (req.file as { secure_url?: string; path?: string })?.secure_url || req.file?.path || "";

    const recipeId = await createFullRecipe(title, description, imagePath, parsedMealTypes, parsedIngredients, parsedCategories, parsedSteps);

    res.status(201).json({ message: "Recept ulo≈æen", id: recipeId });
  } catch (error) {
    console.error("‚ùå Chyba p≈ôi ukl√°d√°n√≠ receptu:", error);
    res.status(500).json({ error: "Nepoda≈ôilo se ulo≈æit recept." });
  }
};

// ‚úÖ PUT /api/recipes/:id
export const updateRecipe = async (req: Request, res: Response): Promise<void> => {
  try {
    const id = Number(req.params.id);
    const { title, description, ingredients, categories, mealType, existingImageUrl, steps } = req.body;

    if (!title || !description || !ingredients || !categories || !mealType) {
      res.status(400).json({ error: "Chyb√≠ povinn√° pole." });
      return;
    }

    const parsedIngredients = JSON.parse(ingredients);
    const parsedCategories = JSON.parse(categories);
    const parsedMealTypes = JSON.parse(mealType);
    const parsedSteps = steps ? JSON.parse(steps) : [];

    const uploadedImageUrl = (req.file as { secure_url?: string; path?: string })?.secure_url || req.file?.path || null;

    let finalImageUrl: string | null = uploadedImageUrl || existingImageUrl || null;

    if (uploadedImageUrl && uploadedImageUrl.trim() !== "") {
      finalImageUrl = uploadedImageUrl;
    } else if (typeof existingImageUrl === "string" && existingImageUrl.trim() !== "" && existingImageUrl !== "null") {
      finalImageUrl = existingImageUrl;
    }

    console.log("üîÑ Aktualizace receptu:");
    console.log("‚Ä¢ title:", title);
    console.log("‚Ä¢ uploadedImageUrl:", uploadedImageUrl);
    console.log("‚Ä¢ existingImageUrl:", existingImageUrl);
    console.log("‚úÖ Pou≈æito finalImageUrl:", finalImageUrl);

    await updateRecipeInDB(id, title, description, finalImageUrl, parsedMealTypes, parsedIngredients, parsedCategories, parsedSteps);

    res.status(200).json({ message: "Recept upraven" });
  } catch (error) {
    console.error("‚ùå Chyba p≈ôi √∫pravƒõ receptu:", error);
    res.status(500).json({ error: "Nepoda≈ôilo se upravit recept." });
  }
};

// ‚úÖ DELETE /api/recipes/:id
export const deleteRecipe = async (req: Request, res: Response): Promise<void> => {
  try {
    const id = Number(req.params.id);
    await deleteRecipeFromDB(id);
    res.status(200).json({ message: "Recept smaz√°n." });
  } catch (error) {
    console.error("‚ùå Chyba p≈ôi maz√°n√≠ receptu:", error);
    res.status(500).json({ error: "Nepoda≈ôilo se smazat recept." });
  }
};
